# GraphQL schema example
#
# https://gqlgen.com/getting-started/
directive @isAuthenticated on FIELD_DEFINITION

scalar DateTime

type User {
  id:String!
  imageUrl:String!
  name:String!
  email:String!
  createdAt:DateTime!
  updatedAt:DateTime!
  deletedAt:DateTime!

  school:[School!]!
  likes:[Note!]!
  class:[Class!]!
  notes:[Note!]!
}
type Jwt{
  token:String!
}
type Note{
  id:String!
  classId:String!
  schoolId:String!
  description:String!
  title:String!
  userId:String!
  isPublic:Boolean!
  createdAt:DateTime!
  updatedAt:DateTime!
  deletedAt:DateTime!

  school:School!
  tags:[Tag!]!
  likeUser:[User!]!
  comment:[Comment!]!
}
type School{
  id:String!
  name:String!
  ownerId:String!
  createdAt:DateTime!
  updatedAt:DateTime!
  deletedAt:DateTime!

  owner:User!
  students:[User!]!
}

type Class {
  id:String!
  name:String!
  schoolId:String!
  ownerId:String!
  createdAt:DateTime!
  updatedAt:DateTime!
  deletedAt:DateTime!

  school:School!
  students:[User!]!
  notes:[Note!]!
}

type Tag {
  id:String!
  name:String!
}
type Comment{
  id:String!
  noteId:String!
  userId:String!
  comment:String!
  createdAt:DateTime!
  updatedAt:DateTime!
  deletedAt:DateTime!
}

type Query {
  getNotes(input:GetNoteProps): [Note!]! @isAuthenticated
  getSchools(searchWord:String!): [School!]! @isAuthenticated
  getClasses(input:GetClassesProps): [Class!]! @isAuthenticated
  getTags(searchWord:String!): [Tag!]! @isAuthenticated
  getMyNotes: Note! @isAuthenticated
  getUser(input:GetUserProps):[User!]! @isAuthenticated
  getJwt(input:GetJwtProps):Jwt! @isAuthenticated
}
type Mutation {
  createUser(input: NewUser!): User!
  updateUser(id:String!,input: UpdateUserProps):User! @isAuthenticated
  createNote(input: NewNote!): Note! @isAuthenticated
  updateNote(id:String!,input: NewNote):Note! @isAuthenticated
  createClass(input: NewClass!): Class! @isAuthenticated
  updateClass(id:String!,input: UpdateClassProps):Class! @isAuthenticated
  createSchool(input: NewSchool!): School! @isAuthenticated
  updateSchool(id:String!,input: UpdateSchoolProps):School! @isAuthenticated
  createComment(input: NewComment!): Comment! @isAuthenticated
  updateComment(id:String!,input: NewComment):Comment! @isAuthenticated
  createTag(input: NewTag!): Tag! @isAuthenticated
  joinClass(input:NewJoinClass!):Class! @isAuthenticated
  joinSchool(input:NewJoinSchool!):School! @isAuthenticated
  like(input:LikeProps!):Note! @isAuthenticated
  deleteLike(input:LikeProps!):Note! @isAuthenticated
}


input NewNote {
  classID: String!
  schoolID:String!
  description:String!
  title:String!
  userID:String!
  isPublic:Boolean!
}

input NewClass {
  name: String!
  schoolID:String!
  ownerID:String!
}

input NewSchool {
  name: String!
}

input NewUser {
  name: String!
  email: String!
  password: String!
}
input GetJwtProps{
  email: String!
  password: String!
}

input NewTag {
  name: String!
}

input NewComment {
  userID: String!
  noteID: String!
  comment: String!
}


input NewJoinClass {
  classID: String!
  userID: String!
}

input NewJoinSchool {
  schoolID: String!
  userID: String!
}

input GetClassesProps {
  schoolID: String
  userID: String
  classID: String
  searchWord:String
}

input GetNoteProps {
  noteID: String
  schoolID: String
  userID: String
  classID: String
  isPublic:Boolean
}

input GetUserProps {
  email: String
  userID: String
  name:String
}

input UpdateSchoolProps {
  name:String
  ownerID:String
}

input UpdateClassProps {
  name:String
  owner_id:String
}

input LikeProps {
  userID:String!
  noteID:String!
}

input UpdateUserProps {
  email:String
  name:String
  imageUrl:String
}

